{"version":3,"names":[],"mappings":"","sources":["Display_employees_in_workload_grid.js"],"sourcesContent":["require('babel/polyfill');\r\nvar Q = require('q');\r\n\r\nvar myStepDefinitionsWrapper = function () {\r\n    this.World = require('../support/world.js').World;\r\n\r\n    var wrapTest = function (fn) {\r\n        Q.async(fn)();\r\n    };\r\n\r\n    this.Given(/^I'm logged in as 'Admin'$/, function (callback) {\r\n        var self = this;\r\n\r\n        wrapTest(function* () {\r\n\r\n            try {\r\n                yield self.browser.get('http://localhost:3000/#/login');\r\n                var emailInput = yield self.browser.elementById('auth-email-input');\r\n                var passwordInput = yield self.browser.elementById('auth-password-input');\r\n                emailInput.value = 'example@email.com';\r\n                passwordInput.value = 'password';\r\n                var loginButton = self.browser.elementByClassName('login-btn');\r\n                yield loginButton.click();\r\n                callback();\r\n            } catch (error) {\r\n                callback.fail(error);\r\n            }\r\n\r\n        });\r\n\r\n    });\r\n\r\n    this.When('I navigate to \"$module\" module', function (module, callback) {\r\n        var self = this;\r\n\r\n        wrapTest(function* () {\r\n\r\n            try {\r\n                yield self.browser.get('http://localhost:3000/#/' + module);\r\n                callback();\r\n            } catch (error) {\r\n                callback.fail('Navigate to ' + module + ' fail ' + err);\r\n            }\r\n\r\n        });\r\n\r\n    });\r\n\r\n    this.Then(/^I see table of employees$/, function (callback) {\r\n        var self = this;\r\n\r\n        wrapTest(function* () {\r\n\r\n            try {\r\n                var workloadGrid = yield self.browser.waitForElementByClassName('workload-grid');\r\n\r\n                if (workloadGrid) {\r\n                    callback();\r\n                } else {\r\n                    callback.fail('Find workload table fail ' + err);\r\n                }\r\n\r\n            } catch (error) {\r\n                callback.fail('Find workload table fail ' + error);\r\n            }\r\n\r\n        });\r\n\r\n    });\r\n\r\n    this.Then(/^table contains columns$/, function (callback) {\r\n        var self = this;\r\n\r\n        wrapTest(function* () {\r\n            try {\r\n                var workloadGrid = yield self.browser.elementByClassName('workload-grid');\r\n\r\n                if (workloadGrid) {\r\n                    var rows = yield workloadGrid.elementsByCssSelector('tr');\r\n\r\n                    if (rows.slice().length) {\r\n                        callback();\r\n                    } else {\r\n                        callback.fail();\r\n                    }\r\n\r\n                }\r\n\r\n            } catch (error) {\r\n                callback.fail('Find workload table rows fail ' + err);\r\n            }\r\n        });\r\n\r\n    });\r\n\r\n};\r\n\r\nmodule.exports = myStepDefinitionsWrapper;"],"file":"Display_employees_in_workload_grid.js","sourceRoot":"/source/"}